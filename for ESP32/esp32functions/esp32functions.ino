// for ESP32 Wroom - 32d
#define voltagePin 34
#define currentPin 35
#include "ACS712.h"
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI  33
#define OLED_CLK   32
#define OLED_DC    26
#define OLED_CS    27
#define OLED_RESET 25
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);



#define LOGO_HEIGHT   64
#define LOGO_WIDTH    128
static const unsigned char PROGMEM logo_bmp[] =
  {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x1f, 0xff, 0xf7, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xff, 0xff, 0xf8, 0x7f, 0xef, 0xff, 0xfc, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xff, 0xe7, 0xc7, 0xc7, 0xdf, 0xff, 0xf9, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0xff, 0xc7, 0x80, 0xfc, 0x5f, 0xff, 0xf3, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0xff, 0xfe, 0x00, 0x1f, 0xc7, 0xff, 0xe7, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x9d, 0xff, 0xfc, 0x0f, 0x07, 0xf8, 0x7f, 0xcf, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xde, 0x7f, 0xf0, 0x1f, 0xe3, 0xff, 0x8f, 0x9f, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0x1f, 0xe0, 0x3f, 0xf9, 0xff, 0xe1, 0x3f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xe3, 0xc0, 0xf8, 0xfd, 0xc7, 0xfc, 0x7f, 0xff, 0xe7, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xff, 0x81, 0xf0, 0x7d, 0x80, 0xff, 0x8f, 0xff, 0xef, 0xff, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xff, 0x03, 0xf0, 0xfd, 0x00, 0x7f, 0xf3, 0xff, 0xdf, 0xff, 0xff, 0x7f, 0xff, 
  0xff, 0xff, 0xfb, 0xfe, 0x07, 0xff, 0xfa, 0x04, 0x3f, 0xfc, 0x7f, 0x3f, 0xff, 0xff, 0x9f, 0xff, 
  0xff, 0xff, 0xfd, 0xf8, 0x0f, 0x7f, 0xe0, 0x0f, 0xbf, 0xff, 0x1c, 0xff, 0xff, 0xff, 0xef, 0xff, 
  0xff, 0xff, 0xfe, 0xf0, 0x3e, 0x87, 0x80, 0x3f, 0x7f, 0xff, 0xe3, 0xff, 0xff, 0x9f, 0xf7, 0xff, 
  0xff, 0xff, 0xff, 0x78, 0x79, 0xf8, 0x60, 0x7c, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x7f, 0xf3, 0xff, 
  0xff, 0xff, 0xff, 0xbe, 0xf3, 0xff, 0x80, 0xf9, 0xff, 0xef, 0xfe, 0x7f, 0xf9, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0x8f, 0xfe, 0x03, 0xf7, 0xff, 0x81, 0xff, 0x9f, 0xe7, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0xff, 0xfe, 0x07, 0xef, 0xfe, 0x00, 0x7f, 0xe7, 0x8f, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0xf8, 0x0f, 0x9f, 0xf8, 0x04, 0x3f, 0xf9, 0x3f, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xf8, 0x3f, 0x3f, 0xe0, 0x1f, 0x9f, 0xfc, 0xff, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xf8, 0x7e, 0x3f, 0xc0, 0x7f, 0xbf, 0xff, 0x3f, 0xff, 0xf7, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xf8, 0xfe, 0x3e, 0x00, 0xff, 0x3f, 0x9f, 0xdf, 0xff, 0xef, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xfc, 0x3f, 0x9c, 0x03, 0xdf, 0x7e, 0x03, 0xe7, 0xff, 0x9f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xcf, 0xc0, 0x0f, 0x3e, 0xfc, 0x01, 0xf3, 0xfe, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xf1, 0x20, 0x38, 0x7d, 0xf8, 0x18, 0xcc, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xfe, 0xe0, 0xf0, 0xf9, 0xf0, 0x3e, 0x02, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xe3, 0xf8, 0xfb, 0xc0, 0xfe, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf3, 0x07, 0xf7, 0x81, 0xfe, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0x43, 0xef, 0x07, 0xfe, 0x1e, 0x4f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xe3, 0xce, 0x0f, 0xfc, 0x7e, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xf3, 0xd8, 0x1f, 0xfc, 0xf9, 0xf7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfc, 0xb0, 0x3e, 0x7d, 0xf3, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x60, 0x7c, 0x7f, 0xe7, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xe0, 0xf8, 0xff, 0xdf, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf1, 0xe0, 0xff, 0x3f, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xfc, 0xc0, 0xfe, 0x7f, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x81, 0xf9, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf9, 0xf3, 0xff, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3c, 0xcf, 0xff, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0x81, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xfe, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}; // logo of bee with wing


static const unsigned char PROGMEM logo2_bmp[] ={
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xff, 0xe7, 0xc7, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0xff, 0xc7, 0x80, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0xff, 0xfe, 0x00, 0x1f, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x9d, 0xff, 0xfc, 0x0f, 0x07, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xde, 0x7f, 0xf0, 0x1f, 0xe3, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0x1f, 0xe0, 0x3f, 0xf9, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xe3, 0xc0, 0xf8, 0xfd, 0xc7, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xff, 0x81, 0xf0, 0x7d, 0x80, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xff, 0x03, 0xf0, 0xfd, 0x00, 0x7f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfb, 0xfe, 0x07, 0xff, 0xfa, 0x06, 0x3f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfd, 0xf8, 0x0f, 0x7f, 0xe0, 0x0f, 0xbf, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfe, 0xf0, 0x3e, 0x87, 0x80, 0x3f, 0x7f, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0x78, 0x79, 0xf8, 0x60, 0x7c, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xbe, 0xf3, 0xff, 0x80, 0xf9, 0xff, 0xef, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0x8f, 0xfe, 0x03, 0xf7, 0xff, 0x81, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0xff, 0xfe, 0x07, 0xef, 0xfe, 0x00, 0x7f, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0xf8, 0x0f, 0x9f, 0xf8, 0x04, 0x3f, 0xfb, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xf8, 0x3f, 0x3f, 0xe0, 0x1f, 0x9f, 0xfc, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xf8, 0x7e, 0x3f, 0xc0, 0x7f, 0xbf, 0xff, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xcf, 0xf8, 0xfe, 0x3e, 0x00, 0xff, 0x3f, 0x9f, 0xdf, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xfc, 0x3f, 0x9c, 0x03, 0xdf, 0x7e, 0x03, 0xe7, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xcf, 0xc0, 0x0f, 0x3e, 0xfc, 0x01, 0xfb, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xf1, 0x20, 0x38, 0x7d, 0xf8, 0x18, 0xcd, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xfe, 0xe0, 0xf0, 0xf9, 0xf0, 0x3e, 0x02, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xe3, 0xf8, 0xfb, 0xc0, 0xfe, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf3, 0x07, 0xf7, 0x81, 0xfe, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0x43, 0xef, 0x07, 0xfe, 0x1e, 0x4f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xe3, 0xce, 0x0f, 0xfc, 0x7e, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xf3, 0xd8, 0x1f, 0xfc, 0xf9, 0xf7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfc, 0xb0, 0x3e, 0x7d, 0xf3, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x60, 0x7c, 0x7f, 0xe7, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xe1, 0xf8, 0xff, 0xdf, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf1, 0xe0, 0xff, 0x3f, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xfc, 0xc0, 0xfe, 0x7f, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x81, 0xf9, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf9, 0xf3, 0xff, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3c, 0xcf, 0xff, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0x81, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xfe, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}; // logo of bee without wing


static const unsigned char PROGMEM logodead_bmp[] ={
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xfc, 0x7f, 0xfe, 0x1f, 0xff, 0xf7, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xff, 0x9f, 0xf8, 0x7f, 0xef, 0xff, 0xfc, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xff, 0x93, 0xc7, 0xc7, 0xdf, 0xff, 0xf9, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0xfc, 0x0f, 0x80, 0xfc, 0x5f, 0xff, 0xf3, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0xff, 0x9e, 0x00, 0x1f, 0xc7, 0xff, 0xe7, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x9d, 0xff, 0x9c, 0x0f, 0x07, 0xf8, 0x7f, 0xcf, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xde, 0x7f, 0xf0, 0x1f, 0xe3, 0xff, 0x8f, 0x9f, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xdf, 0x1f, 0xe0, 0x3f, 0xf9, 0xff, 0xe1, 0x3f, 0xff, 0xf0, 0x00, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xcf, 0xe3, 0xc0, 0xf8, 0xfd, 0xc7, 0xfc, 0x7f, 0xff, 0xe7, 0xff, 0xc7, 0xff, 0xff, 
  0xff, 0xff, 0xef, 0xff, 0x81, 0xf0, 0x7d, 0x80, 0xff, 0x8f, 0xff, 0xef, 0xff, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xf7, 0xff, 0x03, 0xf0, 0xfd, 0x00, 0x7f, 0xf3, 0xff, 0xdf, 0xff, 0xff, 0x7f, 0xff, 
  0xff, 0xff, 0xfb, 0xfe, 0x07, 0xff, 0xfa, 0x04, 0x3f, 0xfc, 0x7f, 0x3f, 0xff, 0xff, 0x9f, 0xff, 
  0xff, 0xff, 0xfd, 0xf8, 0x0f, 0x7f, 0xe0, 0x0f, 0xbf, 0xff, 0x1c, 0xff, 0xff, 0xff, 0xef, 0xff, 
  0xff, 0xff, 0xfe, 0xf0, 0x3e, 0x87, 0x80, 0x3f, 0x7f, 0xff, 0xe3, 0xff, 0xff, 0x9f, 0xf7, 0xff, 
  0xff, 0xff, 0xff, 0x78, 0x79, 0xf8, 0x60, 0x7c, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x7f, 0xf3, 0xff, 
  0xff, 0xff, 0xff, 0xbe, 0xf3, 0xff, 0x80, 0xf9, 0xff, 0xef, 0xfe, 0x7f, 0xf9, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xcf, 0x8f, 0xfe, 0x03, 0xf7, 0xff, 0x81, 0xff, 0x9f, 0xe7, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0xff, 0xfe, 0x07, 0xef, 0xfe, 0x00, 0x7f, 0xe7, 0x8f, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xf9, 0xff, 0xf8, 0x0f, 0x9f, 0xf8, 0x04, 0x3f, 0xf9, 0x3f, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xfe, 0xff, 0xf8, 0x3f, 0x3f, 0xe0, 0x1f, 0x9f, 0xfc, 0xff, 0xff, 0xfb, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x3f, 0xf8, 0x7e, 0x3f, 0xc0, 0x7f, 0xbf, 0xff, 0x3f, 0xff, 0xf7, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xdf, 0xf8, 0xfe, 0x3e, 0x00, 0xff, 0x3f, 0x9f, 0xdf, 0xff, 0xef, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf7, 0xfc, 0x3f, 0x9c, 0x03, 0xdf, 0x7e, 0x03, 0xe7, 0xff, 0x9f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xcf, 0xc0, 0x0f, 0x3e, 0xfc, 0x01, 0xf3, 0xfe, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xf1, 0x20, 0x38, 0x7d, 0xf8, 0x18, 0xcc, 0x03, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xfe, 0xe0, 0xf0, 0xf9, 0xf0, 0x3e, 0x02, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0xe3, 0xf8, 0xfb, 0xc0, 0xfe, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xf3, 0x07, 0xf7, 0x81, 0xfe, 0x00, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0x43, 0xe7, 0x07, 0xfe, 0x1e, 0x4f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xe3, 0xce, 0x0f, 0xfc, 0x7e, 0xe7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xf3, 0xd8, 0x1f, 0xfc, 0xf9, 0xf7, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xfc, 0xb0, 0x3e, 0x7d, 0xf3, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0x60, 0x7c, 0x7f, 0xe7, 0xf9, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xe0, 0xf8, 0xff, 0xdf, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf1, 0xe0, 0xff, 0x3f, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xfc, 0xc0, 0xfe, 0x7f, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0x81, 0xf9, 0xff, 0xfd, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xf9, 0xf3, 0xff, 0xfb, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3c, 0xcf, 0xff, 0xf3, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0x81, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xfe, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}; //logo of dead bee






float voltage;
float current;
float power;

// ESP32 has 3.3 volt with a max ADC value of 4095 steps (12 bits)

// current function
ACS712  ACS(A0, 5.0, 1023, 100);
float currentmeasure () {
  float mA = ACS.mA_DC();
  float mycurr = (mA+6647)/3373 - 1.97;
  return mycurr;
}

// voltage function
float voltageCorrection (int voltPin) {
  float value;
  value = analogRead(voltPin);
  Serial.println(value);
  float value1 = value * 3.3 /4095 * 2.003;
  Serial.println("voltage");
  Serial.println(value1);
  return value1;
}

// power function 
float powermeasure(){
  float power = voltageCorrection(voltagePin)* currentmeasure();
  return power;
}



// drawing of logos on the esp32 display screen
void testdrawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(200);
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo2_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(200);
  display.clearDisplay();
}


void textdisplay(void){
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Group");
  display.println("Members :");
  display.display();
  delay(2000);
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Andy");
  display.display();
  delay(2000);
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Chermaine");
  display.display();
  delay(2000);
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Jinghui");
  display.display();
  delay(2000);
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Jia Woei");
  display.display();
  delay(2000);

  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Charissa");
  display.display();
  delay(2000);
  
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("With thank");
  display.println("To Tony,");
  display.println("Qi Jie,");
  display.println("and Dr Ho");
  display.display();
  delay(2000);
  
}


void thanks(void){
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Thank You");
  display.println("Have a");
  display.println("Nice Day:)");
  display.display();
  delay(2000);
  }

// in the event of battery is close to running out of battery, a dead bee will appear flashing
void lowbatt(void){
  display.clearDisplay();
  display.drawBitmap(
  (display.width()  - LOGO_WIDTH ) / 2,
  (display.height() - LOGO_HEIGHT) / 2,
  logodead_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(500);
  display.clearDisplay();
  delay(1000);
}

void showstats(void){
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0); 
  
  voltage = voltageCorrection(voltagePin);
  display.println("Voltage :");
  display.println(voltage);
  display.println();
  
  current = currentmeasure();
  display.println("Current:" );
  display.println(current);

  power = powermeasure();
  display.println("Power:" );
  display.println(power);
}




void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  Serial.println(__FILE__);
  ACS.autoMidPoint();

  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
   
  for (int i = 1; i <= 6; ++i) {
        testdrawbitmap();
        }

   // Draw a small bitmap image
  textdisplay();

  for (int i = 1; i <= 6; ++i) {
        lowbatt();
        }
        
  thanks();
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  pinMode(voltagePin, INPUT);
}


void loop() {
  voltage = voltageCorrection(voltagePin);
  Serial.println("main loop");
  Serial.println("voltage:" );
  Serial.println(voltage);
  
  current = currentmeasure();
  Serial.println("current:" );
  Serial.println(current);

  power = powermeasure();
  Serial.println("power:" );
  Serial.println(power);

  showstats();
}
